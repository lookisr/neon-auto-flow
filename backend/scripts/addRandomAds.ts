import mongoose from 'mongoose';
import { Advertisement } from '../src/models/Advertisement.ts';
import { User } from '../src/models/User.ts';
import dotenv from 'dotenv';

dotenv.config();

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/kps-auto';

// –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
const brands = ['Toyota', 'Honda', 'Nissan', 'Mazda', 'Subaru', 'Mitsubishi', 'Lexus', 'Infiniti', 'Acura', 'Daihatsu'];
const models = {
  'Toyota': ['Camry', 'Corolla', 'RAV4', 'Highlander', 'Prius', 'Avalon', 'Tacoma', 'Tundra'],
  'Honda': ['Civic', 'Accord', 'CR-V', 'Pilot', 'Odyssey', 'Insight', 'Ridgeline'],
  'Nissan': ['Altima', 'Sentra', 'Rogue', 'Murano', 'Pathfinder', 'Maxima', 'Frontier'],
  'Mazda': ['CX-5', 'CX-9', 'Mazda3', 'Mazda6', 'MX-5', 'CX-30'],
  'Subaru': ['Outback', 'Forester', 'Impreza', 'Legacy', 'Crosstrek', 'Ascent'],
  'Mitsubishi': ['Outlander', 'Eclipse Cross', 'Lancer', 'Pajero', 'ASX'],
  'Lexus': ['ES', 'IS', 'RX', 'NX', 'LS', 'GS', 'LC'],
  'Infiniti': ['Q50', 'Q60', 'QX50', 'QX60', 'QX80'],
  'Acura': ['TLX', 'RDX', 'MDX', 'ILX', 'NSX'],
  'Daihatsu': ['Terios', 'Mira', 'Move', 'Cast', 'Tanto']
};

const transmissions = ['manual', 'automatic', 'robot', 'variator'];
const fuelTypes = ['gasoline', 'diesel', 'hybrid', 'electric', 'lpg'];
const colors = ['–ë–µ–ª—ã–π', '–ß–µ—Ä–Ω—ã–π', '–°–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π', '–°–µ—Ä—ã–π', '–ö—Ä–∞—Å–Ω—ã–π', '–°–∏–Ω–∏–π', '–ó–µ–ª–µ–Ω—ã–π', '–ñ–µ–ª—Ç—ã–π', '–û—Ä–∞–Ω–∂–µ–≤—ã–π', '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π'];

const descriptions = [
  '–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —Å–µ—Ä–≤–∏—Å–Ω–∞—è –∫–Ω–∏–∂–∫–∞',
  '–ù–∏–∑–∫–∏–π –ø—Ä–æ–±–µ–≥, –æ–¥–∏–Ω –≤–ª–∞–¥–µ–ª–µ—Ü, –±–µ–∑ –î–¢–ü',
  '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω, —ç–∫–æ–Ω–æ–º–∏—á–Ω—ã–π –¥–≤–∏–≥–∞—Ç–µ–ª—å, –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π —Å–∞–ª–æ–Ω',
  '–ù–∞–¥–µ–∂–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è —Å–µ–º—å–∏, –ø—Ä–æ—Å—Ç–æ—Ä–Ω—ã–π –±–∞–≥–∞–∂–Ω–∏–∫',
  '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä, –¥–∏–Ω–∞–º–∏—á–Ω–∞—è –µ–∑–¥–∞, —Å—Ç–∏–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω',
  '–≠–∫–æ–Ω–æ–º–∏—á–Ω—ã–π —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞, –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –≥–æ—Ä–æ–¥–∞',
  '–ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è –µ–∑–¥–∞, —Ç–∏—Ö–∞—è —Ä–∞–±–æ—Ç–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
  '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ–º–æ—â–∏',
  '–ü—Ä–∞–∫—Ç–∏—á–Ω—ã–π –≤—ã–±–æ—Ä, –Ω–∏–∑–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ',
  '–ü—Ä–µ–º–∏—É–º –∫–∞—á–µ—Å—Ç–≤–æ, —Ä–æ—Å–∫–æ—à–Ω—ã–π –∏–Ω—Ç–µ—Ä—å–µ—Ä, –ø–µ—Ä–µ–¥–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'
];

const companyContacts = [
  '–ê–≤—Ç–æ—Å–∞–ª–æ–Ω "–Ø–ø–æ–Ω—Å–∫–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏" +7 (495) 123-45-67',
  '–û–û–û "–ê–≤—Ç–æ–¢—Ä–µ–π–¥" +7 (495) 234-56-78',
  '–ò–ü –ò–≤–∞–Ω–æ–≤ –ê.–í. +7 (495) 345-67-89',
  '–ê–≤—Ç–æ—Ü–µ–Ω—Ç—Ä "–ü—Ä–µ—Å—Ç–∏–∂" +7 (495) 456-78-90',
  '–û–û–û "–ê–≤—Ç–æ–ú–∏—Ä" +7 (495) 567-89-01'
];

const privateContacts = [
  '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä +7 (999) 111-22-33',
  '–ú–∞—Ä–∏—è +7 (999) 222-33-44',
  '–î–º–∏—Ç—Ä–∏–π +7 (999) 333-44-55',
  '–ï–ª–µ–Ω–∞ +7 (999) 444-55-66',
  '–°–µ—Ä–≥–µ–π +7 (999) 555-66-77',
  '–ê–Ω–Ω–∞ +7 (999) 666-77-88',
  '–ú–∏—Ö–∞–∏–ª +7 (999) 777-88-99',
  '–û–ª—å–≥–∞ +7 (999) 888-99-00'
];

function getRandomElement<T>(array: T[]): T {
  return array[Math.floor(Math.random() * array.length)];
}

function getRandomNumber(min: number, max: number): number {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

function getRandomFloat(min: number, max: number): number {
  return parseFloat((Math.random() * (max - min) + min).toFixed(1));
}

async function addRandomAds() {
  try {
    console.log('üîß [DEBUG] Connecting to MongoDB...');
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Connected to MongoDB');

    // –û—á–∏—â–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    await User.deleteMany({});
    await Advertisement.deleteMany({});
    console.log('‚úÖ Cleared existing users and advertisements');

    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã—Ö
    let users = await User.find({});
    
    if (users.length === 0) {
      console.log('‚ö†Ô∏è No users found, creating test users...');
      const testUsers = [
        new User({ email: 'company1@example.com', password: 'password123', role: 'admin' }),
        new User({ email: 'company2@example.com', password: 'password123', role: 'admin' }),
        new User({ email: 'user1@example.com', password: 'password123', role: 'user' }),
        new User({ email: 'user2@example.com', password: 'password123', role: 'user' }),
        new User({ email: 'user3@example.com', password: 'password123', role: 'user' })
      ];
      
      for (const user of testUsers) {
        await user.save();
      }
      users = await User.find({});
    }

    // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª—è–º
    const companyUsers = users.filter(u => u.role === 'admin');
    const privateUsers = users.filter(u => u.role === 'user');

    console.log(`‚úÖ Found ${users.length} users`);

    // –°–æ–∑–¥–∞–µ–º 20 —Å–ª—É—á–∞–π–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π (10 –æ—Ç —á–∞—Å—Ç–Ω—ã—Ö –ª–∏—Ü, 10 –æ—Ç –∫–æ–º–ø–∞–Ω–∏–π)
    const advertisements: any[] = [];

    // –°–æ–∑–¥–∞—ë–º –ø–æ 10 –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    const statuses = ['approved', 'pending', 'rejected'];
    for (const status of statuses) {
      for (let i = 0; i < 5; i++) { // 5 –æ—Ç –∫–æ–º–ø–∞–Ω–∏–π
        const brand = getRandomElement(brands);
        const model = getRandomElement(models[brand as keyof typeof models]);
        const year = getRandomNumber(2015, 2024);
        const price = getRandomNumber(800000, 5000000);
        const engineVolume = getRandomFloat(1.0, 4.0);
        const mileage = getRandomNumber(10000, 150000);
        const ownersCount = getRandomNumber(1, 3);
        const isDamaged = Math.random() < 0.15;
        const transmission = getRandomElement(transmissions);
        const fuelType = getRandomElement(fuelTypes);
        const color = getRandomElement(colors);
        const description = getRandomElement(descriptions);
        const contacts = getRandomElement(companyContacts);
        const user = getRandomElement(companyUsers);
        const advertisement = new Advertisement({
          userId: user._id,
          brand,
          carModel: model,
          year,
          price,
          description,
          contacts,
          photoUrls: ['/placeholder.svg'],
          engineVolume,
          mileage,
          ownersCount,
          isDamaged,
          transmission,
          fuelType,
          color,
          status,
          moderationNote: status === 'rejected' ? '–ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–ª–æ—â–∞–¥–∫–∏' : undefined,
          moderatedBy: status !== 'pending' ? user._id : undefined,
          moderatedAt: status !== 'pending' ? new Date() : undefined
        });
        advertisements.push(advertisement);
      }
      for (let i = 0; i < 5; i++) { // 5 –æ—Ç —á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const brand = getRandomElement(brands);
        const model = getRandomElement(models[brand as keyof typeof models]);
        const year = getRandomNumber(2015, 2024);
        const price = getRandomNumber(800000, 5000000);
        const engineVolume = getRandomFloat(1.0, 4.0);
        const mileage = getRandomNumber(10000, 150000);
        const ownersCount = getRandomNumber(1, 3);
        const isDamaged = Math.random() < 0.15;
        const transmission = getRandomElement(transmissions);
        const fuelType = getRandomElement(fuelTypes);
        const color = getRandomElement(colors);
        const description = getRandomElement(descriptions);
        const contacts = getRandomElement(privateContacts);
        const user = getRandomElement(privateUsers);
        const advertisement = new Advertisement({
          userId: user._id,
          brand,
          carModel: model,
          year,
          price,
          description,
          contacts,
          photoUrls: ['/placeholder.svg'],
          engineVolume,
          mileage,
          ownersCount,
          isDamaged,
          transmission,
          fuelType,
          color,
          status,
          moderationNote: status === 'rejected' ? '–ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–ª–æ—â–∞–¥–∫–∏' : undefined,
          moderatedBy: status !== 'pending' ? user._id : undefined,
          moderatedAt: status !== 'pending' ? new Date() : undefined
        });
        advertisements.push(advertisement);
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    for (const ad of advertisements) {
      await ad.save();
      console.log(`‚úÖ Advertisement created: ${ad.brand} ${ad.carModel} (${ad.status}) - ${ad.contacts}`);
    }

    console.log('‚úÖ Successfully added 20 random advertisements');
    console.log(`üìä Statistics:`);
    console.log(`   - Total ads: ${advertisements.length}`);
    console.log(`   - Approved: ${advertisements.filter((ad: any) => ad.status === 'approved').length}`);
    console.log(`   - Pending: ${advertisements.filter((ad: any) => ad.status === 'pending').length}`);
    console.log(`   - Rejected: ${advertisements.filter((ad: any) => ad.status === 'rejected').length}`);

    process.exit(0);
  } catch (error) {
    console.error('‚ùå Error adding random ads:', error);
    process.exit(1);
  }
}

addRandomAds(); 